map "http://research.philips.com/fhir/dstu3/mapping/Communication" =
    "R3 Parameters of Activitydefinition.$apply to Communication"

uses "http://hl7.org/fhir/StructureDefinition/Parameters"       as source
uses "http://hl7.org/fhir/StructureDefinition/Communication" as target

group main
    input src: Parameters as source
    input tgt: ProcedureRequest as target

    "subject" : for src.parameter as p where name='subject' then {
        do: for p.value as sbj make tgt.subject = sbj
    }

    "practitioner" : for src.parameter as p where name='practitioner' then{
            do: for p.value as prac make tgt.sender = prac
        }

    "organization" : for src as parameters where (parameter.where(name='practitioner').not() and parameter.where(name='organization')) then {
            "orgNotPrac": for parameters.parameter as p where name='organization' then{
                do: for p.value as org make tgt.sender = org
                }
        }

    "encounter" : for src.parameter as p where name='encounter' then {
        do: for p.value as enc make tgt.context = enc
    }

    actded: for src.parameter as p where name='source' then {
        do: for p.resource as ad then createActDef( ad, tgt )
    }
    
endgroup

group createActDef
    input src: ActivityDefinition as source
    input tgt: ProcedureRequest as target

    "basedOn"      : for src                 make tgt.basedOn = reference( src )
    "status"       : for src                 make tgt.status = "preparation"
    "ad.code"      : for src.code     as vvv make tgt.reasonCode = vvv
    "ad.timing"    : for src          as vvv check timing.empty()
    "ad.location"  : for src          as vvv check location.empty()
    "ad.product"   : for src          as vvv check product.empty()
    "ad.quantity"  : for src          as vvv check quantity.empty()
    "ad.bodysite"  : for src          as vvv check bodysite.empty()
    "ad.dosage"    : for src          as vvv check dosage.empty()
    "ad.relatedart": for src.relatedArtifact as relatedArtifact make tgt.payload as payload then {
        do: for relatedArtifact as relatedArtifact make payload.content as content then {
            "content": for relatedArtifact as vvv make content = vvv
//            "display" : for relatedArtifact.display as vvv make content
//            "citation": for relatedArtifact as vvv make content = vvv
//            "url"     : for relatedArtifact as vvv make content = vvv
//            "document": for relatedArtifact as vvv make content = vvv
//            "resource": for relatedArtifact as vvv make content = vvv
        }
    }
endgroup


